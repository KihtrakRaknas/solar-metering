{"version":3,"sources":["helperFunctions/prepDataForTable.js","components/Table.js","components/NoData.js","components/Graph.js","screens/Home.js","screens/FullTable.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["prepDataForTable","arr","fields","Object","keys","filter","el","includes","timeKey","forEach","row","Date","toUTCString","key","name","map","label","split","join","replace","field","tableData","Table","props","data","console","log","reverse","striped","borderless","small","hover","sortable","columns","rows","NoData","Graph","windowSize","useState","width","undefined","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","traces","categories","category","getVsTime","x","y","push","type","mode","marker","color","layout","title","xaxis","yaxis","yTitle","config","responsive","yAxis","Number","Home","className","style","textAlign","length","padding","overflowX","FullTable","setReverse","gradient","onClick","NavBar","lastWrite","setLastWrite","checkLastWrite","fetch","then","res","json","catch","err","setInterval","timeObj","timestamp","diffInHrs","hours","Math","floor","days","recent","calcDiffInTime","expand","fixed","scrolling","backgroundColor","to","require","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","App","setData","update","basename","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ffc653f.chunk.js","sourcesContent":["export default function prepDataForTable(arr, fields) {\r\n    // const key = arr.shift()\r\n    // const tableData = arr.map(row=>{\r\n    //     let rowObj = {}\r\n    //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\r\n    //     return rowObj\r\n    // })\r\n    // return {key, tableData}\r\n    for(let timeKey of Object.keys(arr[0]).filter(el=>el.includes(\"time\"))){\r\n        arr.forEach(row=>{\r\n            row[timeKey] = new Date(row[timeKey]).toUTCString();\r\n        })\r\n    }\r\n\r\n    const key = Object.keys(arr[0])\r\n    .filter(name=>!fields?true:fields.includes(name))\r\n    .map(name=>({\r\n        label: name.split(\"_\").join(\" \").replace(\"Vb max daily\", \"Battery Voltage Max (Daily)\")\r\n        .replace(\"Vb min daily\", \"Battery Voltage Min (Daily)\")\r\n        .replace(\"Whc daily\", \"Battery Wh (Daily)\")\r\n        .replace(\"fault daily\", \"Fault Daily\")\r\n        .replace(\"alarm daily\", \"Alarm Daily\"),\r\n\r\n        field: name\r\n    }))\r\n    return {\r\n        tableData: arr,\r\n        key\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { MDBDataTable } from 'mdbreact';\r\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\r\n\r\nexport default function Table(props) {\r\n    const {key, tableData} = prepDataForTable(props.data, props.fields)\r\n    console.log(props.reverse)\r\n    return (\r\n        <MDBDataTable\r\n            striped\r\n            borderless    \r\n            //responsive\r\n            small\r\n            //scrollX\r\n            hover \r\n            sortable={false}\r\n            data={{\r\n                columns:key,\r\n                rows:props.reverse?tableData:[...tableData].reverse() /* I have no clue why the spread syntax makes it work but it does */\r\n            }}\r\n        />\r\n    )\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function NoData() {\r\n    return (\r\n        <h1>No data found!</h1>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default function Graph(props) {\r\n    const { tableData } = prepDataForTable(props.data)\r\n    const windowSize = useWindowSize();\r\n    const traces = []\r\n    for (let category of props.categories) {\r\n        const { x, y } = getVsTime(category, tableData)\r\n        traces.push({\r\n            x,\r\n            y,\r\n            name: category,\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            marker: { color: category.includes(\"max\") ? 'red' : 'black' },\r\n        })\r\n    }\r\n    return (\r\n        <Plot\r\n            data={traces}\r\n            layout={{\r\n                width: windowSize.width - 20, height: 500, title: props.title, xaxis: { title: 'Time' }, yaxis: { title: props.yTitle }\r\n            }}\r\n            config={{ responsive: true }}\r\n        />\r\n    )\r\n\r\n}\r\n\r\nfunction getVsTime(yAxis, tableData) {\r\n    return { x: tableData.map(row => new Date(row[\"time (UTC)\"])), y: tableData.map(row => Number(row[yAxis.split(\" \").join(\"_\")])) }\r\n}\r\n\r\nfunction useWindowSize() {\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: undefined,\r\n        height: undefined,\r\n    });\r\n    useEffect(() => {\r\n        // Handler to call on window resize\r\n        function handleResize() {\r\n            setWindowSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n            });\r\n        }\r\n        // Add event listener\r\n        window.addEventListener(\"resize\", handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n}","import Table from '../components/Table';\r\nimport NoData from '../components/NoData';\r\nimport Graph from '../components/Graph';\r\n\r\n/** Home page will contain output and table with most important data */\r\nexport default function Home({ data }) {\r\n    return (\r\n        <div className=\"App\">\r\n            <br/>\r\n            <div className=\"title_component\">\r\n                <header className=\"App-header\">\r\n                    <h1 className=\"App-title\" style={{ textAlign: \"center\" }}>Real-Time Solar Output</h1>\r\n                </header>\r\n            </div>\r\n\r\n            {data.length > 0 ? <Graph data={data} categories={[\"Vb min daily\", \"Vb max daily\"]} title=\"Vb Over Time\" yTitle=\"Vb Value (unit goes here)\" /> : <NoData />}\r\n            {data.length > 0 ? <Graph data={data} categories={[\"Whc daily\"]} title=\"Whc Value\" yTitle=\"Whc Value (unit goes here)\" /> : <NoData />}\r\n\r\n            <div style={{ padding: 15, overflowX: \"auto\" }}>\r\n                {data.length > 0 ? <><Table data={data} fields={[\"time (UTC)\", \"Vb_max_daily\", \"Vb_min_daily\", \"Whc_daily\", \"alarm_daily\"]} /></> : <NoData />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Table from '../components/Table';\r\nimport NoData from '../components/NoData';\r\nimport { MDBBtn } from 'mdbreact';\r\n\r\n/** This page will contain all table data */\r\nexport default function FullTable({ data }) {\r\n    const [reverse, setReverse] = useState(false);\r\n    return (\r\n        <div className=\"App\">\r\n            <br/>\r\n            <div className=\"title_component\">\r\n                <header className=\"App-header\">\r\n                    <h1 className=\"App-title\" style={{textAlign:\"center\"}}>Complete Solar Data from MSView</h1>\r\n                </header>\r\n            </div>\r\n            <br/>\r\n            <div style={{ padding: 15, overflowX: \"auto\" }}>\r\n                {data.length > 0 ? <><Table data={data} reverse={reverse}/></> : <NoData />}\r\n                <div style={{textAlign:\"center\"}}>\r\n                    <MDBBtn gradient={reverse?\"peach\":\"purple\"} onClick={()=>setReverse(!reverse)}>Reverse Order</MDBBtn>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavItem, MDBNavLink } from 'mdbreact';\r\n\r\nexport default function NavBar({}) {\r\n    const [lastWrite, setLastWrite] = useState(null);\r\n\r\n    const checkLastWrite = ()=>{\r\n        fetch('http://localhost:4001/last-write').then(res=>res.json()).then(data=>{\r\n            console.log(`Last Write: ${data.lastWrite}`)\r\n            setLastWrite(data.lastWrite)\r\n        }).catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    useEffect(()=>{\r\n        checkLastWrite()\r\n        setInterval(checkLastWrite, 1000*60*5) // Update last write every 5 minutes\r\n    }, [true])\r\n\r\n    const calcDiffInTime = (timestamp) =>{\r\n        const diff = (new Date()) - timestamp\r\n        const diffInHrs = diff/(1000*60*60)\r\n        return {hours: Math.floor(diffInHrs % 24), days: Math.floor(diffInHrs/24), recent: diffInHrs<1}\r\n    }\r\n\r\n    let timeObj = calcDiffInTime(lastWrite)\r\n\r\n    return (\r\n        <>\r\n            <nav>\r\n                <MDBNavbar color=\"gray\" expand=\"md\" fixed=\"top\" scrolling style={{backgroundColor:\"white\"}}>\r\n                    <MDBNavbarBrand>\r\n                        <strong className=\"black-text\">Solor Metering</strong>\r\n                    </MDBNavbarBrand>\r\n                    <MDBNavLink to=\"/home\">Graphs</MDBNavLink>\r\n                    <MDBNavLink to=\"/full-table\">Full Table</MDBNavLink>\r\n                    <div className=\"ml-auto\">\r\n                        {lastWrite != null? \r\n                            lastWrite == -1? \r\n                                `No uploads have happened yet`\r\n                            :\r\n                                timeObj.recent?\r\n                                    `An upload recently took place`\r\n                                :\r\n                                    `Last upload was ${timeObj.hours} hours and ${timeObj.days} days ago`\r\n                        :\r\n                            \"View Only\"}\r\n                    </div>\r\n                </MDBNavbar>\r\n            </nav>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n        </>\r\n    )\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport raw from \"raw.macro\";\r\nimport parse from 'csv-parse';\r\n\r\nimport Home from './screens/Home';\r\nimport FullTable from './screens/FullTable';\r\nimport NavBar from './components/NavBar';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport firebase from \"firebase\";\r\n\r\nconst fetch = require('node-fetch');\r\n\r\nrequire(\"firebase/firestore\");\r\ntry {\r\n  firebase.initializeApp({\r\n    apiKey: \"AIzaSyD2K0qINs7uoG6-2whLT8Wgab_AvAhVEzI\",\r\n    authDomain: \"sierra-leone-cec24.firebaseapp.com\",\r\n    projectId: \"sierra-leone-cec24\",\r\n    storageBucket: \"sierra-leone-cec24.appspot.com\",\r\n    messagingSenderId: \"458713135578\",\r\n    appId: \"1:458713135578:web:d5a3e153fa883269ace8e3\"\r\n  });\r\n} catch (err) {\r\n  // ignore app already initialized error\r\n}\r\nconst db = firebase.firestore();\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n\r\n  let update = () => {\r\n    console.log(\"fetching!\")\r\n    fetch('http://localhost:4001/logfile').then(res=>res.json()).then(data=>{\r\n      console.log(data)\r\n      setData(data)\r\n    }).catch(err=>{\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  useEffect(()=>{\r\n    update()\r\n    setInterval(update, 1000*30) // request file from web server every 30 seconds\r\n  }, [true])\r\n\r\n  return (\r\n    <Router basename=\"/solar-metering\">\r\n      <NavBar/>\r\n\r\n      <Switch>\r\n        <Route path=\"/full-table\">\r\n          <FullTable data={data} />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Home data={data} />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; import\n'bootstrap-css-only/css/bootstrap.min.css'; import\n'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}