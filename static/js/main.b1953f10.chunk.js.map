{"version":3,"sources":["reportWebVitals.js","index.js","components/NoData.js","components/Table.js","helperFunctions/prepDataForTable.js","App.js","screens/FullTable.js","components/NavBar.js","components/Graph.js","screens/Home.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","NoData","type","color","height","width","Table","props","prepDataForTable","data","fields","key","tableData","console","log","reverse","striped","borderless","small","hover","sortable","columns","rows","arr","Object","keys","filter","el","includes","timeKey","forEach","row","Date","toUTCString","name","map","label","split","join","replace","field","fetch","require","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","err","db","firestore","useState","setData","firebaseTimestamp","setFirebaseTimestamp","update","res","json","global","firebaseListener","catch","logFileRef","collection","doc","onSnapshot","timestamp","seconds","useEffect","setInterval","basename","path","FullTable","setReverse","className","style","textAlign","padding","overflowX","length","gradient","onClick","NavBar","lastWrite","setLastWrite","checkLastWrite","timeObj","diffInHrs","hours","Math","floor","days","recent","hoursFixed","toFixed","calcDiffInTime","expand","fixed","scrolling","backgroundColor","to","Graph","windowSize","undefined","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","traces","categories","category","getVsTime","x","y","push","mode","marker","layout","title","xaxis","yaxis","yTitle","config","responsive","yAxis","Number","Home"],"mappings":"6MAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K,qGChBe,SAASe,IACpB,OACI,cAAC,IAAD,CAAcC,KAAK,OAAOC,MAAO,QAASC,OAAQ,IAAKC,MAAO,Q,4GCDvD,SAASC,EAAMC,GAAQ,IAAD,EACRC,YAAiBD,EAAME,KAAMF,EAAMG,QAArDC,EAD0B,EAC1BA,IAAKC,EADqB,EACrBA,UAEZ,OADAC,QAAQC,IAAIP,EAAMQ,SAEd,cAAC,IAAD,CACIC,SAAO,EACPC,YAAU,EAEVC,OAAK,EAELC,OAAK,EACLC,UAAU,EACVX,KAAM,CACFY,QAAQV,EACRW,KAAKf,EAAMQ,QAAQH,EAAU,YAAIA,GAAWG,e,8EClB7C,SAASP,EAAiBe,EAAKb,GAAQ,oBAQ/Bc,OAAOC,KAAKF,EAAI,IAAIG,QAAO,SAAAC,GAAE,OAAEA,EAAGC,SAAS,YARZ,yBAQ1CC,EAR0C,QAS9CN,EAAIO,SAAQ,SAAAC,GACRA,EAAIF,GAAW,IAAIG,KAAKD,EAAIF,IAAUI,kBAF9C,IAAI,EAAJ,qBAAwE,IARtB,8BAclD,IAAMtB,EAAMa,OAAOC,KAAKF,EAAI,IAC3BG,QAAO,SAAAQ,GAAI,OAAGxB,GAAYA,EAAOkB,SAASM,MAC1CC,KAAI,SAAAD,GAAI,MAAG,CACRE,MAAOF,EAAKG,MAAM,KAAKC,KAAK,KAAKC,QAAQ,eAAgB,+BACxDA,QAAQ,eAAgB,+BACxBA,QAAQ,YAAa,sBACrBA,QAAQ,cAAe,eACvBA,QAAQ,cAAe,eAExBC,MAAON,MAEX,MAAO,CACHtB,UAAWW,EACXZ,S,uHCdF8B,EAAQC,EAAQ,KAEtBA,EAAQ,KACR,IACEC,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,qCACZC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAET,MAAOC,IAGT,IAAMC,EAAKT,IAASU,YAgDLvD,IA9Cf,WAAgB,IAAD,EACWwD,mBAAS,IADpB,mBACN7C,EADM,KACA8C,EADA,OAEqCD,oBAAU,GAF/C,mBAENE,EAFM,KAEaC,EAFb,KAITC,EAAS,WACX7C,QAAQC,IAAI,aACZ2B,EAAM,iCAAiCpD,MAAK,SAAAsE,GAAG,OAAEA,EAAIC,UAAQvE,MAAK,SAAAoB,GAChEI,QAAQC,IAAIL,GACZ8C,EAAQ9C,GACLoD,EAAOC,mBACRD,EAAOC,mBACPD,EAAOC,iBAAmB,SAE3BC,OAAM,SAAAZ,GACP,GAA8B,MAA3BU,EAAOC,iBAAyB,CACjC,IAAME,EAAaZ,EAAGa,WAAW,WAAWC,IAAI,QAChDL,EAAOC,iBAAmBE,EAAWG,YAAW,SAACD,GAC/CX,EAAQW,EAAIzD,OAAOA,MACnBI,QAAQC,IAAIoD,EAAIzD,OAAO2D,UAAUC,SACjCZ,EAAoD,IAA/BS,EAAIzD,OAAO2D,UAAUC,YAG9CxD,QAAQC,IAAIqC,OAShB,OALAmB,qBAAU,WACRZ,IACAa,YAAYb,EAAQ,OACnB,EAAC,IAGF,eAAC,IAAD,CAAQc,SAAS,kBAAjB,UACE,cAAC,IAAD,CAAQhB,kBAAmBA,IAE3B,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiB,KAAK,cAAZ,SACE,cAAC,IAAD,CAAWhE,KAAMA,MAEnB,cAAC,IAAD,CAAOgE,KAAK,IAAZ,SACE,cAAC,IAAD,CAAMhE,KAAMA,e,sIChEP,SAASiE,EAAT,GAA8B,IAATjE,EAAQ,EAARA,KAAQ,EACV6C,oBAAS,GADC,mBACjCvC,EADiC,KACxB4D,EADwB,KAExC,OACI,sBAAKC,UAAU,MAAf,UACI,uBACA,qBAAKA,UAAU,kBAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,oBAAIA,UAAU,YAAYC,MAAO,CAACC,UAAU,UAA5C,iDAGR,uBACA,sBAAKD,MAAO,CAAEE,QAAS,GAAIC,UAAW,QAAtC,UACKvE,EAAKwE,OAAS,EAAI,mCAAE,cAAC,IAAD,CAAOxE,KAAMA,EAAMM,QAASA,MAAgB,cAAC,IAAD,IACjE,qBAAK8D,MAAO,CAACC,UAAU,UAAvB,SACI,cAAC,IAAD,CAAQI,SAAUnE,EAAQ,QAAQ,SAAUoE,QAAS,kBAAIR,GAAY5D,IAArE,qC,oGCjBL,SAASqE,EAAT,GAAwC,IAAtB5B,EAAqB,EAArBA,kBAAqB,EAChBF,mBAAS,MADO,mBAC3C+B,EAD2C,KAChCC,EADgC,KAG5CC,EAAiB,WACnB9C,MAAM,oCAAoCpD,MAAK,SAAAsE,GAAG,OAAEA,EAAIC,UAAQvE,MAAK,SAAAoB,GACjEI,QAAQC,IAAR,sBAA2BL,EAAK4E,YAChCC,EAAa7E,EAAK4E,cACnBtB,OAAM,SAAAZ,GACLtC,QAAQC,IAAIqC,OAIpBmB,qBAAU,WACNiB,IACAhB,YAAYgB,EAAgB,OAC7B,EAAC,IAEJ,IAMIC,EANmB,SAACpB,GACpB,IACMqB,GADQ,IAAIzD,KAAUoC,GACL,KACvB,MAAO,CAACsB,MAAOC,KAAKC,MAAMH,EAAY,IAAKI,KAAMF,KAAKC,MAAMH,EAAU,IAAKK,OAAQL,EAAU,EAAGM,YAAaN,EAAY,IAAIO,QAAQ,IAG3HC,EAA6B,GAAdZ,GAAgC,MAAbA,EAAmBA,EAAY7B,GAE/E,OACI,qCACI,8BACI,eAAC,IAAD,CAAWrD,MAAM,OAAO+F,OAAO,KAAKC,MAAM,MAAMC,WAAS,EAACvB,MAAO,CAACwB,gBAAgB,SAAlF,UACI,cAAC,IAAD,UACI,wBAAQzB,UAAU,aAAlB,8BAEJ,cAAC,IAAD,CAAY0B,GAAG,QAAf,oBACA,cAAC,IAAD,CAAYA,GAAG,cAAf,wBACA,qBAAK1B,UAAU,UAAf,SACkB,MAAbS,GACiB,GAAdA,EAAA,+BAGIG,EAAQM,OAAR,0DAGuBN,EAAQE,MAH/B,sBAGkDF,EAAQK,KAH1D,cAKgB,GAApBrC,EAAA,wBACqBgC,EAAQO,WAD7B,sBACqDP,EAAQK,KAD7D,uBAQhB,uBACA,uBACA,4B,6ICrDG,SAASU,EAAMhG,GAAQ,IAAD,EACzBK,EAAcJ,YAAiBD,EAAME,MAArCG,UACF4F,EA6BV,WAA0B,IAAD,EACelD,mBAAS,CACzCjD,WAAOoG,EACPrG,YAAQqG,IAHS,mBACdD,EADc,KACFE,EADE,KAoBrB,OAfApC,qBAAU,WAEN,SAASqC,IACLD,EAAc,CACVrG,MAAOuG,OAAOC,WACdzG,OAAQwG,OAAOE,cAQvB,OAJAF,OAAOG,iBAAiB,SAAUJ,GAElCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,IACIH,EAjDYS,GACbC,EAAS,GAHkB,cAIZ3G,EAAM4G,YAJM,IAIjC,2BAAuC,CAAC,IAA/BC,EAA8B,UAClBC,EAAUD,EAAUxG,GAA7B0G,EAD2B,EAC3BA,EAAGC,EADwB,EACxBA,EACXL,EAAOM,KAAK,CACRF,IACAC,IACArF,KAAMkF,EACNlH,KAAM,UACNuH,KAAM,gBACNC,OAAQ,CAAEvH,MAAOiH,EAASxF,SAAS,OAAS,MAAQ,YAZ3B,8BAejC,OACI,cAAC,IAAD,CACInB,KAAMyG,EACNS,OAAQ,CACJtH,MAAOmG,EAAWnG,MAAQ,GAAID,OAAQ,IAAKwH,MAAOrH,EAAMqH,MAAOC,MAAO,CAAED,MAAO,QAAUE,MAAO,CAAEF,MAAOrH,EAAMwH,SAEnHC,OAAQ,CAAEC,YAAY,KAMlC,SAASZ,EAAUa,EAAOtH,GACtB,MAAO,CAAE0G,EAAG1G,EAAUuB,KAAI,SAAAJ,GAAG,OAAI,IAAIC,KAAKD,EAAI,kBAAiBwF,EAAG3G,EAAUuB,KAAI,SAAAJ,GAAG,OAAIoG,OAAOpG,EAAImG,EAAM7F,MAAM,KAAKC,KAAK,WC3B7G,SAAS8F,EAAT,GAAyB,IAAT3H,EAAQ,EAARA,KAC3B,OACI,sBAAKmE,UAAU,MAAf,UACI,uBACA,qBAAKA,UAAU,kBAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,oBAAIA,UAAU,YAAYC,MAAO,CAAEC,UAAW,UAA9C,wCAIPrE,EAAKwE,OAAS,EAAI,cAACsB,EAAD,CAAO9F,KAAMA,EAAM0G,WAAY,CAAC,eAAgB,gBAAiBS,MAAM,eAAeG,OAAO,8BAAiC,cAAC9H,EAAA,EAAD,IAChJQ,EAAKwE,OAAS,EAAI,cAACsB,EAAD,CAAO9F,KAAMA,EAAM0G,WAAY,CAAC,aAAcS,MAAM,YAAYG,OAAO,+BAAkC,cAAC9H,EAAA,EAAD,IAE5H,qBAAK4E,MAAO,CAAEE,QAAS,GAAIC,UAAW,QAAtC,SACKvE,EAAKwE,OAAS,EAAI,mCAAE,cAAC3E,EAAA,EAAD,CAAOG,KAAMA,EAAMC,OAAQ,CAAC,aAAc,eAAgB,eAAgB,YAAa,mBAAwB,cAACT,EAAA,EAAD,W","file":"static/js/main.b1953f10.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; import\n'bootstrap-css-only/css/bootstrap.min.css'; import\n'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useState, useEffect } from 'react';\nimport ReactLoading from 'react-loading';\n\nexport default function NoData() {\n    return (\n        <ReactLoading type=\"bars\" color={\"black\"} height={667} width={375} />\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { MDBDataTable } from 'mdbreact';\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\n\nexport default function Table(props) {\n    const {key, tableData} = prepDataForTable(props.data, props.fields)\n    console.log(props.reverse)\n    return (\n        <MDBDataTable\n            striped\n            borderless    \n            //responsive\n            small\n            //scrollX\n            hover \n            sortable={false}\n            data={{\n                columns:key,\n                rows:props.reverse?tableData:[...tableData].reverse() /* I have no clue why the spread syntax makes it work but it does */\n            }}\n        />\n    )\n\n}","export default function prepDataForTable(arr, fields) {\n    // const key = arr.shift()\n    // const tableData = arr.map(row=>{\n    //     let rowObj = {}\n    //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\n    //     return rowObj\n    // })\n    // return {key, tableData}\n    for(let timeKey of Object.keys(arr[0]).filter(el=>el.includes(\"time\"))){\n        arr.forEach(row=>{\n            row[timeKey] = new Date(row[timeKey]).toUTCString();\n        })\n    }\n\n    const key = Object.keys(arr[0])\n    .filter(name=>!fields?true:fields.includes(name))\n    .map(name=>({\n        label: name.split(\"_\").join(\" \").replace(\"Vb max daily\", \"Battery Voltage Max (Daily)\")\n        .replace(\"Vb min daily\", \"Battery Voltage Min (Daily)\")\n        .replace(\"Whc daily\", \"Battery Wh (Daily)\")\n        .replace(\"fault daily\", \"Fault Daily\")\n        .replace(\"alarm daily\", \"Alarm Daily\"),\n\n        field: name\n    }))\n    return {\n        tableData: arr,\n        key\n    }\n}","import React, { useState, useEffect } from 'react';\n\nimport Home from './screens/Home';\nimport FullTable from './screens/FullTable';\nimport NavBar from './components/NavBar';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport firebase from \"firebase\";\n\nconst fetch = require('node-fetch');\n\nrequire(\"firebase/firestore\");\ntry {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyD2K0qINs7uoG6-2whLT8Wgab_AvAhVEzI\",\n    authDomain: \"sierra-leone-cec24.firebaseapp.com\",\n    projectId: \"sierra-leone-cec24\",\n    storageBucket: \"sierra-leone-cec24.appspot.com\",\n    messagingSenderId: \"458713135578\",\n    appId: \"1:458713135578:web:d5a3e153fa883269ace8e3\"\n  });\n} catch (err) {\n  // ignore app already initialized error\n}\nconst db = firebase.firestore();\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [firebaseTimestamp, setFirebaseTimestamp] = useState(-1);\n\n  let update = () => {\n    console.log(\"fetching!\")\n    fetch('http://localhost:4001/logfile').then(res=>res.json()).then(data=>{\n      console.log(data)\n      setData(data)\n      if(global.firebaseListener){\n        global.firebaseListener() //unsubscribe\n        global.firebaseListener = null\n      }\n    }).catch(err=>{\n      if(global.firebaseListener == null){\n        const logFileRef = db.collection('logData').doc(\"data\");\n        global.firebaseListener = logFileRef.onSnapshot((doc) => {\n          setData(doc.data().data)\n          console.log(doc.data().timestamp.seconds)\n          setFirebaseTimestamp(doc.data().timestamp.seconds * 1000)\n        });\n      }\n      console.log(err)\n    })\n  }\n\n  useEffect(()=>{\n    update()\n    setInterval(update, 1000*30) // request file from web server every 30 seconds\n  }, [true])\n\n  return (\n    <Router basename=\"/solar-metering\">\n      <NavBar firebaseTimestamp={firebaseTimestamp}/>\n\n      <Switch>\n        <Route path=\"/full-table\">\n          <FullTable data={data} />\n        </Route>\n        <Route path=\"/\">\n          <Home data={data} />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport Table from '../components/Table';\nimport NoData from '../components/NoData';\nimport { MDBBtn } from 'mdbreact';\n\n/** This page will contain all table data */\nexport default function FullTable({ data }) {\n    const [reverse, setReverse] = useState(false);\n    return (\n        <div className=\"App\">\n            <br/>\n            <div className=\"title_component\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\" style={{textAlign:\"center\"}}>Complete Solar Data from MSView</h1>\n                </header>\n            </div>\n            <br/>\n            <div style={{ padding: 15, overflowX: \"auto\" }}>\n                {data.length > 0 ? <><Table data={data} reverse={reverse}/></> : <NoData />}\n                <div style={{textAlign:\"center\"}}>\n                    <MDBBtn gradient={reverse?\"peach\":\"purple\"} onClick={()=>setReverse(!reverse)}>Reverse Order</MDBBtn>\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { MDBNavbar, MDBNavbarBrand, MDBNavItem, MDBNavLink } from 'mdbreact';\n\nexport default function NavBar({ firebaseTimestamp }) {\n    const [lastWrite, setLastWrite] = useState(null);\n\n    const checkLastWrite = ()=>{\n        fetch('http://localhost:4001/last-write').then(res=>res.json()).then(data=>{\n            console.log(`Last Write: ${data.lastWrite}`)\n            setLastWrite(data.lastWrite)\n        }).catch(err=>{\n            console.log(err)\n        })\n    }\n\n    useEffect(()=>{\n        checkLastWrite()\n        setInterval(checkLastWrite, 1000*30) // Update last write every 30 seconds\n    }, [true])\n\n    const calcDiffInTime = (timestamp) =>{\n        const diff = (new Date()) - timestamp\n        const diffInHrs = diff/(1000*60*60)\n        return {hours: Math.floor(diffInHrs % 24), days: Math.floor(diffInHrs/24), recent: diffInHrs<1, hoursFixed: (diffInHrs % 24).toFixed(2)}\n    }\n\n    let timeObj = calcDiffInTime(lastWrite != -1 && lastWrite != null? lastWrite : firebaseTimestamp)\n\n    return (\n        <>\n            <nav>\n                <MDBNavbar color=\"gray\" expand=\"md\" fixed=\"top\" scrolling style={{backgroundColor:\"white\"}}>\n                    <MDBNavbarBrand>\n                        <strong className=\"black-text\">Solar Metering</strong>\n                    </MDBNavbarBrand>\n                    <MDBNavLink to=\"/home\">Graphs</MDBNavLink>\n                    <MDBNavLink to=\"/full-table\">Full Table</MDBNavLink>\n                    <div className=\"ml-auto\">\n                        {lastWrite != null? \n                            lastWrite == -1? \n                                `No uploads have happened yet`\n                            :\n                                timeObj.recent?\n                                    `An upload recently took place`\n                                :\n                                    `Last upload was ${timeObj.hours} hours and ${timeObj.days} days ago`\n                        :\n                            firebaseTimestamp!=-1?\n                                `Logs are from ${timeObj.hoursFixed} hours and ${timeObj.days} days ago`\n                            :\n                                ``\n                        }\n                    </div>\n                </MDBNavbar>\n            </nav>\n            <br/>\n            <br/>\n            <br/>\n        </>\n    )\n\n}","import React, { useState, useEffect } from 'react';\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\nimport Plot from 'react-plotly.js';\n\nexport default function Graph(props) {\n    const { tableData } = prepDataForTable(props.data)\n    const windowSize = useWindowSize();\n    const traces = []\n    for (let category of props.categories) {\n        const { x, y } = getVsTime(category, tableData)\n        traces.push({\n            x,\n            y,\n            name: category,\n            type: 'scatter',\n            mode: 'lines+markers',\n            marker: { color: category.includes(\"max\") ? 'red' : 'black' },\n        })\n    }\n    return (\n        <Plot\n            data={traces}\n            layout={{\n                width: windowSize.width - 20, height: 500, title: props.title, xaxis: { title: 'Time' }, yaxis: { title: props.yTitle }\n            }}\n            config={{ responsive: true }}\n        />\n    )\n\n}\n\nfunction getVsTime(yAxis, tableData) {\n    return { x: tableData.map(row => new Date(row[\"time (UTC)\"])), y: tableData.map(row => Number(row[yAxis.split(\" \").join(\"_\")])) }\n}\n\nfunction useWindowSize() {\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize);\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n}","import Table from '../components/Table';\nimport NoData from '../components/NoData';\nimport Graph from '../components/Graph';\n\n/** Home page will contain output and table with most important data */\nexport default function Home({ data }) {\n    return (\n        <div className=\"App\">\n            <br/>\n            <div className=\"title_component\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\" style={{ textAlign: \"center\" }}>Real-Time Solar Output</h1>\n                </header>\n            </div>\n\n            {data.length > 0 ? <Graph data={data} categories={[\"Vb min daily\", \"Vb max daily\"]} title=\"Vb Over Time\" yTitle=\"Vb Value (unit goes here)\" /> : <NoData />}\n            {data.length > 0 ? <Graph data={data} categories={[\"Whc daily\"]} title=\"Whc Value\" yTitle=\"Whc Value (unit goes here)\" /> : <NoData />}\n\n            <div style={{ padding: 15, overflowX: \"auto\" }}>\n                {data.length > 0 ? <><Table data={data} fields={[\"time (UTC)\", \"Vb_max_daily\", \"Vb_min_daily\", \"Whc_daily\", \"alarm_daily\"]} /></> : <NoData />}\n            </div>\n        </div>\n    );\n}\n\n"],"sourceRoot":""}