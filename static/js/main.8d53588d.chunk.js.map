{"version":3,"sources":["helperFunctions/prepDataForTable.js","components/Table.js","components/NoData.js","components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["prepDataForTable","arr","fields","Object","keys","filter","el","includes","timeKey","forEach","row","Date","toLocaleString","tableData","key","name","map","label","split","join","field","Table","props","data","striped","borderless","small","columns","rows","NoData","windowSize","useState","width","undefined","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","style","theme","VictoryTheme","material","scale","x","y","animate","createStack","axisLabelComponent","dy","dependentAxis","categories","total","result","newData","yAxis","Number","getVsTime","element","index","console","log","push","App","setData","parse","comment","delimiter","err","output","error","className","length","padding","overflowX","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d53588d.chunk.js","sourcesContent":["export default function prepDataForTable(arr, fields) {\r\n    // const key = arr.shift()\r\n    // const tableData = arr.map(row=>{\r\n    //     let rowObj = {}\r\n    //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\r\n    //     return rowObj\r\n    // })\r\n    // return {key, tableData}\r\n    for(let timeKey of Object.keys(arr[0]).filter(el=>el.includes(\"time\"))){\r\n        arr.forEach(row=>{\r\n            row[timeKey]=new Date(row[timeKey]).toLocaleString()\r\n        })\r\n    }\r\n    return {tableData: arr, key: Object.keys(arr[0]).filter(name=>!fields?true:fields.includes(name)).map(name=>({label: name.split(\"_\").join(\" \"), field:name}))}\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { MDBDataTable } from 'mdbreact';\r\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\r\n\r\nexport default function Table(props) {\r\n    const {key, tableData} = prepDataForTable(props.data, props.fields)\r\n    // console.log(tableData)\r\n    // console.log(props.data)\r\n    return (\r\n        <MDBDataTable\r\n            striped\r\n            borderless    \r\n            //responsive\r\n            small\r\n            //scrollX\r\n            \r\n            data={{\r\n                columns:key,\r\n                rows:tableData\r\n            }}\r\n        />\r\n    )\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function NoData() {\r\n    return (\r\n        <h1>No data found!</h1>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { VictoryChart, VictoryArea, VictoryAxis, VictoryTheme, VictoryStack, VictoryLegend, VictoryLabel } from 'victory';\r\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\r\n\r\nexport default function Table(props) {\r\n    const { tableData } = prepDataForTable(props.data)\r\n    const categories = [\"Vb min daily\", \"Vb max daily\"]\r\n    const windowSize = useWindowSize();\r\n    // console.log(tableData)\r\n    // console.log(props.data)\r\n    return (\r\n        <div style={{ height: 500, }}>\r\n            <VictoryChart\r\n                theme={VictoryTheme.material}\r\n                width={windowSize.width - 10}\r\n                scale={{ x: \"time\", y: \"linear\" }}\r\n            >\r\n                <VictoryStack animate>\r\n                    {createStack(categories, tableData)}\r\n                    {/* <AreaVsTime yAxis=\"Vb max daily\" tableData={tableData}/> */}\r\n                    {/* <AreaVsTime yAxis=\"Vb max daily\" tableData={tableData}/>\r\n                    <AreaVsTime yAxis=\"Vb min daily\" tableData={tableData}/> */}\r\n                </VictoryStack>\r\n                <VictoryAxis axisLabelComponent={<VictoryLabel dy={20} />} label=\"Date\" />\r\n                <VictoryAxis axisLabelComponent={<VictoryLabel dy={-20} />} label=\"Value\" dependentAxis />\r\n            </VictoryChart>\r\n            {/* <VictoryLegend \r\n                //   x={125} y={50}\r\n                    title=\"Legend\"\r\n                    centerTitle\r\n                    orientation=\"horizontal\"\r\n                    gutter={20}\r\n                    style={{ border: { stroke: \"black\" }, title: {fontSize: 20 } }}\r\n                    data={[\r\n                    { name: \"One\", symbol: { fill: \"tomato\", type: \"star\" } },\r\n                    { name: \"Two\", symbol: { fill: \"orange\" } },\r\n                    { name: \"Three\", symbol: { fill: \"gold\" } }\r\n                    ]}\r\n            /> */}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction createStack(categories, tableData) {\r\n    let result = []\r\n    let total\r\n    for (let cat of categories) {\r\n        let newData = getVsTime(cat, tableData)\r\n        if (!total) {\r\n            total = newData.map(element => element.y)\r\n        } else {\r\n            newData = newData.map((element, index) => {\r\n                element.y = element.y - total[index]\r\n                return element\r\n            });\r\n            total = total.map((element, index) => element + newData[index].y);\r\n        }\r\n        console.log(newData)\r\n        result.push(<VictoryArea data={newData} />)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getVsTime(yAxis, tableData) {\r\n    return tableData.map(row => ({ x: new Date(row[\"time (UTC)\"]), y: Number(row[yAxis.split(\" \").join(\"_\")]) }))\r\n}\r\n\r\nfunction useWindowSize() {\r\n\r\n    // Initialize state with undefined width/height so server and client renders match\r\n\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n\r\n    const [windowSize, setWindowSize] = useState({\r\n\r\n        width: undefined,\r\n\r\n        height: undefined,\r\n\r\n    });\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // Handler to call on window resize\r\n\r\n        function handleResize() {\r\n\r\n            // Set window width/height to state\r\n\r\n            setWindowSize({\r\n\r\n                width: window.innerWidth,\r\n\r\n                height: window.innerHeight,\r\n\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n        // Add event listener\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n\r\n\r\n\r\n        // Call handler right away so state gets updated with initial window size\r\n\r\n        handleResize();\r\n\r\n\r\n\r\n        // Remove event listener on cleanup\r\n\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n\r\n\r\n\r\n    return windowSize;\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport raw from \"raw.macro\";\r\nimport parse from 'csv-parse';\r\nimport Table from './components/Table';\r\nimport NoData from './components/NoData';\r\nimport Graph from './components/Graph';\r\n\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n\r\n  let update = () => {\r\n    const logFile = raw(\"../please.csv\")//raw(\"C:/Program Files (x86)/Morningstar Corporation/MSView/please.csv\");\r\n    // Create the parser\r\n    parse(logFile, {\r\n      comment: '#',\r\n      delimiter: ',',\r\n      columns: true\r\n    }, function (err, output) {\r\n      // console.log(output)\r\n      if (err)\r\n        console.error(err)\r\n      else\r\n        setData(output)\r\n    })\r\n\r\n    // Trying to display data Sammi outlined was most important. I want to get the two graphs to coexist somehow, with one graph being\r\n    // a bit more prominent than the other.  \r\n\r\n    /*const logFile2 = raw(\"../please1.csv\")\r\n\r\n    parse(logFile2, {\r\n      comment: '#',\r\n      delimiter: ',',\r\n      columns: true\r\n    }, function(err, output){\r\n      // console.log(output)\r\n      if(err)\r\n        console.error(err)\r\n      else\r\n        setData(output)\r\n    }) */\r\n  }\r\n\r\n  useEffect(update, [true])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"title_component\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">Real-Time Solar Output (updates [hourly?] [daily?] [weekly?])</h1>\r\n        </header>\r\n      </div>\r\n\r\n      {data.length > 0 ? <Graph data={data} /> : <NoData />}\r\n      <div style={{ padding: 15, overflowX: \"auto\" }}>\r\n        {data.length > 0 ? <><Table data={data} fields={[\"time (UTC)\", \"Vb_max_daily\", \"Vb_min_daily\", \"Whc_daily\", \"alarm_daily\"]} /><Table data={data}/></> : <NoData />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; import\n'bootstrap-css-only/css/bootstrap.min.css'; import\n'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}