{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Seif\\\\Documents\\\\GitHub\\\\solar-metering\\\\src\\\\components\\\\Graph.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { VictoryChart, VictoryArea, VictoryAxis, VictoryTheme, VictoryStack, VictoryLegend, VictoryLabel } from 'victory';\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\nexport default function Table(props) {\n  _s();\n\n  const {\n    tableData\n  } = prepDataForTable(props.data);\n  const categories = [\"Vb min daily\", \"Vb max daily\"];\n  const windowSize = useWindowSize(); // console.log(tableData)\n  // console.log(props.data)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 500\n    },\n    children: /*#__PURE__*/_jsxDEV(VictoryChart, {\n      theme: VictoryTheme.material,\n      width: windowSize.width - 10,\n      scale: {\n        x: \"time\",\n        y: \"linear\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(VictoryStack, {\n        animate: true,\n        children: createStack(categories, tableData)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(VictoryAxis, {\n        axisLabelComponent: /*#__PURE__*/_jsxDEV(VictoryLabel, {\n          dy: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 50\n        }, this),\n        label: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(VictoryAxis, {\n        axisLabelComponent: /*#__PURE__*/_jsxDEV(VictoryLabel, {\n          dy: -20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 50\n        }, this),\n        label: \"Value\",\n        dependentAxis: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Table, \"TnpA2swiaCW/ySTBotAIncz9ms8=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Table;\n\nfunction createStack(categories, tableData) {\n  let result = [];\n  let total;\n\n  for (let cat of categories) {\n    let newData = getVsTime(cat, tableData);\n\n    if (!total) {\n      total = newData.map(element => element.y);\n    } else {\n      newData = newData.map((element, index) => {\n        element.y = element.y - total[index];\n        return element;\n      });\n      total = total.map((element, index) => element + newData[index].y);\n    }\n\n    console.log(newData);\n    result.push( /*#__PURE__*/_jsxDEV(VictoryArea, {\n      data: newData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this));\n  }\n\n  return result;\n}\n\nfunction getVsTime(yAxis, tableData) {\n  return tableData.map(row => ({\n    x: new Date(row[\"time (UTC)\"]),\n    y: Number(row[yAxis.split(\" \").join(\"_\")])\n  }));\n}\n\nfunction useWindowSize() {\n  _s2();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s2(useWindowSize, \"kF8BZmWhCp9oEn22JUAhz03YZ50=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/Seif/Documents/GitHub/solar-metering/src/components/Graph.js"],"names":["React","useState","useEffect","VictoryChart","VictoryArea","VictoryAxis","VictoryTheme","VictoryStack","VictoryLegend","VictoryLabel","prepDataForTable","Table","props","tableData","data","categories","windowSize","useWindowSize","height","material","width","x","y","createStack","result","total","cat","newData","getVsTime","map","element","index","console","log","push","yAxis","row","Date","Number","split","join","setWindowSize","undefined","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { VictoryChart, VictoryArea, VictoryAxis, VictoryTheme, VictoryStack, VictoryLegend, VictoryLabel } from 'victory';\r\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\r\n\r\nexport default function Table(props) {\r\n    const { tableData } = prepDataForTable(props.data)\r\n    const categories = [\"Vb min daily\", \"Vb max daily\"]\r\n    const windowSize = useWindowSize();\r\n    // console.log(tableData)\r\n    // console.log(props.data)\r\n    return (\r\n        <div style={{ height: 500, }}>\r\n            <VictoryChart\r\n                theme={VictoryTheme.material}\r\n                width={windowSize.width - 10}\r\n                scale={{ x: \"time\", y: \"linear\" }}\r\n            >\r\n                <VictoryStack animate>\r\n                    {createStack(categories, tableData)}\r\n                    {/* <AreaVsTime yAxis=\"Vb max daily\" tableData={tableData}/> */}\r\n                    {/* <AreaVsTime yAxis=\"Vb max daily\" tableData={tableData}/>\r\n                    <AreaVsTime yAxis=\"Vb min daily\" tableData={tableData}/> */}\r\n                </VictoryStack>\r\n                <VictoryAxis axisLabelComponent={<VictoryLabel dy={20} />} label=\"Date\" />\r\n                <VictoryAxis axisLabelComponent={<VictoryLabel dy={-20} />} label=\"Value\" dependentAxis />\r\n            </VictoryChart>\r\n            {/* <VictoryLegend \r\n                //   x={125} y={50}\r\n                    title=\"Legend\"\r\n                    centerTitle\r\n                    orientation=\"horizontal\"\r\n                    gutter={20}\r\n                    style={{ border: { stroke: \"black\" }, title: {fontSize: 20 } }}\r\n                    data={[\r\n                    { name: \"One\", symbol: { fill: \"tomato\", type: \"star\" } },\r\n                    { name: \"Two\", symbol: { fill: \"orange\" } },\r\n                    { name: \"Three\", symbol: { fill: \"gold\" } }\r\n                    ]}\r\n            /> */}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction createStack(categories, tableData) {\r\n    let result = []\r\n    let total\r\n    for (let cat of categories) {\r\n        let newData = getVsTime(cat, tableData)\r\n        if (!total) {\r\n            total = newData.map(element => element.y)\r\n        } else {\r\n            newData = newData.map((element, index) => {\r\n                element.y = element.y - total[index]\r\n                return element\r\n            });\r\n            total = total.map((element, index) => element + newData[index].y);\r\n        }\r\n        console.log(newData)\r\n        result.push(<VictoryArea data={newData} />)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getVsTime(yAxis, tableData) {\r\n    return tableData.map(row => ({ x: new Date(row[\"time (UTC)\"]), y: Number(row[yAxis.split(\" \").join(\"_\")]) }))\r\n}\r\n\r\nfunction useWindowSize() {\r\n\r\n    // Initialize state with undefined width/height so server and client renders match\r\n\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n\r\n    const [windowSize, setWindowSize] = useState({\r\n\r\n        width: undefined,\r\n\r\n        height: undefined,\r\n\r\n    });\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // Handler to call on window resize\r\n\r\n        function handleResize() {\r\n\r\n            // Set window width/height to state\r\n\r\n            setWindowSize({\r\n\r\n                width: window.innerWidth,\r\n\r\n                height: window.innerHeight,\r\n\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n        // Add event listener\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n\r\n\r\n\r\n        // Call handler right away so state gets updated with initial window size\r\n\r\n        handleResize();\r\n\r\n\r\n\r\n        // Remove event listener on cleanup\r\n\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n\r\n\r\n\r\n    return windowSize;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}