{"ast":null,"code":"export default function prepDataForTable(arr, fields) {\n  // const key = arr.shift()\n  // const tableData = arr.map(row=>{\n  //     let rowObj = {}\n  //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\n  //     return rowObj\n  // })\n  // return {key, tableData}\n  for (let timeKey of Object.keys(arr[0]).filter(el => el.includes(\"time\"))) {\n    arr.forEach(row => {\n      row[timeKey] = new Date(row[timeKey]).toUTCString();\n    });\n  }\n  /*Object.keys(arr[0]).forEach(name=>{\r\n      if (name.localeCompare(\"Vb_max_daily\") == 0) {\r\n          name = name.replace(\"Vb_max_daily\",\"Maximum Daily Voltage\");\r\n      }\r\n  }) */\n\n\n  const key = Object.keys(arr[0]).filter(name => !fields ? true : fields.includes(name)).map(name => ({\n    //label: name.split(\"_\").join(\" \")\n    label: name.replace(\"Vb_max_daily\", \"Battery Voltage Max (Daily)\").replace(\"Vb_min_daily\", \"Battery Voltage Min (Daily)\"),\n    field: name\n  }));\n  return {\n    tableData: arr,\n    key\n  };\n}","map":{"version":3,"sources":["C:/Users/Seif/Documents/GitHub/solar-metering/src/helperFunctions/prepDataForTable.js"],"names":["prepDataForTable","arr","fields","timeKey","Object","keys","filter","el","includes","forEach","row","Date","toUTCString","key","name","map","label","replace","field","tableData"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,GAA1B,EAA+BC,MAA/B,EAAuC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAI,IAAIC,OAAR,IAAmBC,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAAC,CAAD,CAAf,EAAoBK,MAApB,CAA2BC,EAAE,IAAEA,EAAE,CAACC,QAAH,CAAY,MAAZ,CAA/B,CAAnB,EAAuE;AACnEP,IAAAA,GAAG,CAACQ,OAAJ,CAAYC,GAAG,IAAE;AACbA,MAAAA,GAAG,CAACP,OAAD,CAAH,GAAe,IAAIQ,IAAJ,CAASD,GAAG,CAACP,OAAD,CAAZ,EAAuBS,WAAvB,EAAf;AACH,KAFD;AAGH;AAED;AACJ;AACA;AACA;AACA;;;AAEI,QAAMC,GAAG,GAAGT,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAAC,CAAD,CAAf,EACXK,MADW,CACJQ,IAAI,IAAE,CAACZ,MAAD,GAAQ,IAAR,GAAaA,MAAM,CAACM,QAAP,CAAgBM,IAAhB,CADf,EAEXC,GAFW,CAEPD,IAAI,KAAG;AACR;AACAE,IAAAA,KAAK,EAAEF,IAAI,CACVG,OADM,CACE,cADF,EACkB,6BADlB,EAENA,OAFM,CAEE,cAFF,EAEkB,6BAFlB,CAFC;AAKRC,IAAAA,KAAK,EAAEJ;AALC,GAAH,CAFG,CAAZ;AASA,SAAO;AACHK,IAAAA,SAAS,EAAElB,GADR;AAEHY,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["export default function prepDataForTable(arr, fields) {\r\n    // const key = arr.shift()\r\n    // const tableData = arr.map(row=>{\r\n    //     let rowObj = {}\r\n    //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\r\n    //     return rowObj\r\n    // })\r\n    // return {key, tableData}\r\n    for(let timeKey of Object.keys(arr[0]).filter(el=>el.includes(\"time\"))){\r\n        arr.forEach(row=>{\r\n            row[timeKey] = new Date(row[timeKey]).toUTCString();\r\n        })\r\n    }\r\n\r\n    /*Object.keys(arr[0]).forEach(name=>{\r\n        if (name.localeCompare(\"Vb_max_daily\") == 0) {\r\n            name = name.replace(\"Vb_max_daily\",\"Maximum Daily Voltage\");\r\n        }\r\n    }) */\r\n\r\n    const key = Object.keys(arr[0])\r\n    .filter(name=>!fields?true:fields.includes(name))\r\n    .map(name=>({\r\n        //label: name.split(\"_\").join(\" \")\r\n        label: name\r\n        .replace(\"Vb_max_daily\", \"Battery Voltage Max (Daily)\")\r\n        .replace(\"Vb_min_daily\", \"Battery Voltage Min (Daily)\"),\r\n        field: name\r\n    }))\r\n    return {\r\n        tableData: arr,\r\n        key\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}