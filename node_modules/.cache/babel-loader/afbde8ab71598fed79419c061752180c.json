{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/Seif/Documents/GitHub/solar-metering/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";export default function prepDataForTable(arr,fields){// const key = arr.shift()\n// const tableData = arr.map(row=>{\n//     let rowObj = {}\n//     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\n//     return rowObj\n// })\n// return {key, tableData}\nvar _iterator=_createForOfIteratorHelper(Object.keys(arr[0]).filter(function(el){return el.includes(\"time\");})),_step;try{var _loop=function _loop(){var timeKey=_step.value;arr.forEach(function(row){row[timeKey]=new Date(row[timeKey]).toUTCString();});};for(_iterator.s();!(_step=_iterator.n()).done;){_loop();}}catch(err){_iterator.e(err);}finally{_iterator.f();}var key=Object.keys(arr[0]).filter(function(name){return!fields?true:fields.includes(name);}).map(function(name){return{label:name.split(\"_\").join(\" \").replace(\"Vb max daily\",\"Battery Voltage Max (Daily)\").replace(\"Vb min daily\",\"Battery Voltage Min (Daily)\").replace(\"Whc daily\",\"Battery Wh (Daily)\").replace(\"fault daily\",\"Fault Daily\").replace(\"alarm daily\",\"Alarm Daily\"),field:name};});return{tableData:arr,key:key};}","map":{"version":3,"sources":["C:/Users/Seif/Documents/GitHub/solar-metering/src/helperFunctions/prepDataForTable.js"],"names":["prepDataForTable","arr","fields","Object","keys","filter","el","includes","timeKey","forEach","row","Date","toUTCString","key","name","map","label","split","join","replace","field","tableData"],"mappings":"wJAAA,cAAe,SAASA,CAAAA,gBAAT,CAA0BC,GAA1B,CAA+BC,MAA/B,CAAuC,CAClD;AACA;AACA;AACA;AACA;AACA;AACA;AAPkD,yCAQ/BC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAAC,CAAD,CAAf,EAAoBI,MAApB,CAA2B,SAAAC,EAAE,QAAEA,CAAAA,EAAE,CAACC,QAAH,CAAY,MAAZ,CAAF,EAA7B,CAR+B,0CAQ1CC,CAAAA,OAR0C,aAS9CP,GAAG,CAACQ,OAAJ,CAAY,SAAAC,GAAG,CAAE,CACbA,GAAG,CAACF,OAAD,CAAH,CAAe,GAAIG,CAAAA,IAAJ,CAASD,GAAG,CAACF,OAAD,CAAZ,EAAuBI,WAAvB,EAAf,CACH,CAFD,EAT8C,EAQlD,+CAAuE,SAItE,CAZiD,qDAclD,GAAMC,CAAAA,GAAG,CAAGV,MAAM,CAACC,IAAP,CAAYH,GAAG,CAAC,CAAD,CAAf,EACXI,MADW,CACJ,SAAAS,IAAI,QAAE,CAACZ,MAAD,CAAQ,IAAR,CAAaA,MAAM,CAACK,QAAP,CAAgBO,IAAhB,CAAf,EADA,EAEXC,GAFW,CAEP,SAAAD,IAAI,QAAG,CACRE,KAAK,CAAEF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,GAArB,EAA0BC,OAA1B,CAAkC,cAAlC,CAAkD,6BAAlD,EACNA,OADM,CACE,cADF,CACkB,6BADlB,EAENA,OAFM,CAEE,WAFF,CAEe,oBAFf,EAGNA,OAHM,CAGE,aAHF,CAGiB,aAHjB,EAINA,OAJM,CAIE,aAJF,CAIiB,aAJjB,CADC,CAORC,KAAK,CAAEN,IAPC,CAAH,EAFG,CAAZ,CAWA,MAAO,CACHO,SAAS,CAAEpB,GADR,CAEHY,GAAG,CAAHA,GAFG,CAAP,CAIH","sourcesContent":["export default function prepDataForTable(arr, fields) {\r\n    // const key = arr.shift()\r\n    // const tableData = arr.map(row=>{\r\n    //     let rowObj = {}\r\n    //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\r\n    //     return rowObj\r\n    // })\r\n    // return {key, tableData}\r\n    for(let timeKey of Object.keys(arr[0]).filter(el=>el.includes(\"time\"))){\r\n        arr.forEach(row=>{\r\n            row[timeKey] = new Date(row[timeKey]).toUTCString();\r\n        })\r\n    }\r\n\r\n    const key = Object.keys(arr[0])\r\n    .filter(name=>!fields?true:fields.includes(name))\r\n    .map(name=>({\r\n        label: name.split(\"_\").join(\" \").replace(\"Vb max daily\", \"Battery Voltage Max (Daily)\")\r\n        .replace(\"Vb min daily\", \"Battery Voltage Min (Daily)\")\r\n        .replace(\"Whc daily\", \"Battery Wh (Daily)\")\r\n        .replace(\"fault daily\", \"Fault Daily\")\r\n        .replace(\"alarm daily\", \"Alarm Daily\"),\r\n\r\n        field: name\r\n    }))\r\n    return {\r\n        tableData: arr,\r\n        key\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}