{"ast":null,"code":"import _slicedToArray from\"C:/Users/Seif/Documents/GitHub/solar-metering/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"C:/Users/Seif/Documents/GitHub/solar-metering/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from'react';import prepDataForTable from'../helperFunctions/prepDataForTable';import Plot from'react-plotly.js';export default function Graph(props){var _prepDataForTable=prepDataForTable(props.data),tableData=_prepDataForTable.tableData;var windowSize=useWindowSize();var traces=[];var _iterator=_createForOfIteratorHelper(props.categories),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var category=_step.value;var _getVsTime=getVsTime(category,tableData),x=_getVsTime.x,y=_getVsTime.y;traces.push({x:x,y:y,name:category,type:'scatter',mode:'lines+markers',marker:{color:category.includes(\"max\")?'red':'black'}});}}catch(err){_iterator.e(err);}finally{_iterator.f();}return/*#__PURE__*/_jsx(Plot,{data:traces,layout:{width:windowSize.width-20,height:500,title:props.title,xaxis:{title:'Time'},yaxis:{title:props.yTitle}},config:{responsive:true}});}function getVsTime(yAxis,tableData){return{x:tableData.map(function(row){return new Date(row[\"time (UTC)\"]);}),y:tableData.map(function(row){return Number(row[yAxis.split(\" \").join(\"_\")]);})};}function useWindowSize(){var _useState=useState({width:undefined,height:undefined}),_useState2=_slicedToArray(_useState,2),windowSize=_useState2[0],setWindowSize=_useState2[1];useEffect(function(){// Handler to call on window resize\nfunction handleResize(){setWindowSize({width:window.innerWidth,height:window.innerHeight});}// Add event listener\nwindow.addEventListener(\"resize\",handleResize);// Call handler right away so state gets updated with initial window size\nhandleResize();// Remove event listener on cleanup\nreturn function(){return window.removeEventListener(\"resize\",handleResize);};},[]);// Empty array ensures that effect is only run on mount\nreturn windowSize;}","map":{"version":3,"sources":["C:/Users/Seif/Documents/GitHub/solar-metering/src/components/Graph.js"],"names":["React","useState","useEffect","prepDataForTable","Plot","Graph","props","data","tableData","windowSize","useWindowSize","traces","categories","category","getVsTime","x","y","push","name","type","mode","marker","color","includes","width","height","title","xaxis","yaxis","yTitle","responsive","yAxis","map","row","Date","Number","split","join","undefined","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":"mUAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,gBAAP,KAA6B,qCAA7B,CACA,MAAOC,CAAAA,IAAP,KAAiB,iBAAjB,CAEA,cAAe,SAASC,CAAAA,KAAT,CAAeC,KAAf,CAAsB,uBACXH,gBAAgB,CAACG,KAAK,CAACC,IAAP,CADL,CACzBC,SADyB,mBACzBA,SADyB,CAEjC,GAAMC,CAAAA,UAAU,CAAGC,aAAa,EAAhC,CACA,GAAMC,CAAAA,MAAM,CAAG,EAAf,CAHiC,yCAIZL,KAAK,CAACM,UAJM,YAIjC,+CAAuC,IAA9BC,CAAAA,QAA8B,4BAClBC,SAAS,CAACD,QAAD,CAAWL,SAAX,CADS,CAC3BO,CAD2B,YAC3BA,CAD2B,CACxBC,CADwB,YACxBA,CADwB,CAEnCL,MAAM,CAACM,IAAP,CAAY,CACRF,CAAC,CAADA,CADQ,CAERC,CAAC,CAADA,CAFQ,CAGRE,IAAI,CAAEL,QAHE,CAIRM,IAAI,CAAE,SAJE,CAKRC,IAAI,CAAE,eALE,CAMRC,MAAM,CAAE,CAAEC,KAAK,CAAET,QAAQ,CAACU,QAAT,CAAkB,KAAlB,EAA2B,KAA3B,CAAmC,OAA5C,CANA,CAAZ,EAQH,CAdgC,qDAejC,mBACI,KAAC,IAAD,EACI,IAAI,CAAEZ,MADV,CAEI,MAAM,CAAE,CACJa,KAAK,CAAEf,UAAU,CAACe,KAAX,CAAmB,EADtB,CAC0BC,MAAM,CAAE,GADlC,CACuCC,KAAK,CAAEpB,KAAK,CAACoB,KADpD,CAC2DC,KAAK,CAAE,CAAED,KAAK,CAAE,MAAT,CADlE,CACqFE,KAAK,CAAE,CAAEF,KAAK,CAAEpB,KAAK,CAACuB,MAAf,CAD5F,CAFZ,CAKI,MAAM,CAAE,CAAEC,UAAU,CAAE,IAAd,CALZ,EADJ,CAUH,CAED,QAAShB,CAAAA,SAAT,CAAmBiB,KAAnB,CAA0BvB,SAA1B,CAAqC,CACjC,MAAO,CAAEO,CAAC,CAAEP,SAAS,CAACwB,GAAV,CAAc,SAAAC,GAAG,QAAI,IAAIC,CAAAA,IAAJ,CAASD,GAAG,CAAC,YAAD,CAAZ,CAAJ,EAAjB,CAAL,CAAwDjB,CAAC,CAAER,SAAS,CAACwB,GAAV,CAAc,SAAAC,GAAG,QAAIE,CAAAA,MAAM,CAACF,GAAG,CAACF,KAAK,CAACK,KAAN,CAAY,GAAZ,EAAiBC,IAAjB,CAAsB,GAAtB,CAAD,CAAJ,CAAV,EAAjB,CAA3D,CAAP,CACH,CAED,QAAS3B,CAAAA,aAAT,EAAyB,eACeT,QAAQ,CAAC,CACzCuB,KAAK,CAAEc,SADkC,CAEzCb,MAAM,CAAEa,SAFiC,CAAD,CADvB,wCACd7B,UADc,eACF8B,aADE,eAKrBrC,SAAS,CAAC,UAAM,CACZ;AACA,QAASsC,CAAAA,YAAT,EAAwB,CACpBD,aAAa,CAAC,CACVf,KAAK,CAAEiB,MAAM,CAACC,UADJ,CAEVjB,MAAM,CAAEgB,MAAM,CAACE,WAFL,CAAD,CAAb,CAIH,CACD;AACAF,MAAM,CAACG,gBAAP,CAAwB,QAAxB,CAAkCJ,YAAlC,EACA;AACAA,YAAY,GACZ;AACA,MAAO,kBAAMC,CAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,CAAqCL,YAArC,CAAN,EAAP,CACH,CAdQ,CAcN,EAdM,CAAT,CAcQ;AACR,MAAO/B,CAAAA,UAAP,CACH","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default function Graph(props) {\r\n    const { tableData } = prepDataForTable(props.data)\r\n    const windowSize = useWindowSize();\r\n    const traces = []\r\n    for (let category of props.categories) {\r\n        const { x, y } = getVsTime(category, tableData)\r\n        traces.push({\r\n            x,\r\n            y,\r\n            name: category,\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            marker: { color: category.includes(\"max\") ? 'red' : 'black' },\r\n        })\r\n    }\r\n    return (\r\n        <Plot\r\n            data={traces}\r\n            layout={{\r\n                width: windowSize.width - 20, height: 500, title: props.title, xaxis: { title: 'Time' }, yaxis: { title: props.yTitle }\r\n            }}\r\n            config={{ responsive: true }}\r\n        />\r\n    )\r\n\r\n}\r\n\r\nfunction getVsTime(yAxis, tableData) {\r\n    return { x: tableData.map(row => new Date(row[\"time (UTC)\"])), y: tableData.map(row => Number(row[yAxis.split(\" \").join(\"_\")])) }\r\n}\r\n\r\nfunction useWindowSize() {\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: undefined,\r\n        height: undefined,\r\n    });\r\n    useEffect(() => {\r\n        // Handler to call on window resize\r\n        function handleResize() {\r\n            setWindowSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n            });\r\n        }\r\n        // Add event listener\r\n        window.addEventListener(\"resize\", handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n}"]},"metadata":{},"sourceType":"module"}