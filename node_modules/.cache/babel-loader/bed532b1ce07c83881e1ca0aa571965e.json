{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Seif\\\\Documents\\\\GitHub\\\\solar-metering\\\\src\\\\components\\\\Graph.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\nimport Plot from 'react-plotly.js';\nexport default function Graph(props) {\n  _s();\n\n  const {\n    tableData\n  } = prepDataForTable(props.data);\n  const windowSize = useWindowSize();\n  const traces = [];\n\n  for (let category of props.categories) {\n    const {\n      x,\n      y\n    } = getVsTime(category, tableData);\n    traces.push({\n      x,\n      y,\n      name: category,\n      type: 'scatter',\n      mode: 'lines+markers',\n      marker: {\n        color: category.includes(\"max\") ? 'red' : 'black'\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Plot, {\n    data: traces,\n    layout: {\n      width: windowSize.width - 20,\n      height: 500,\n      title: props.title,\n      xaxis: {\n        title: 'Time'\n      },\n      yaxis: {\n        title: props.yTitle\n      }\n    },\n    config: {\n      responsive: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Graph, \"TnpA2swiaCW/ySTBotAIncz9ms8=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Graph;\n\nfunction getVsTime(yAxis, tableData) {\n  return {\n    x: tableData.map(row => new Date(row[\"time (UTC)\"])),\n    y: tableData.map(row => Number(row[yAxis.split(\" \").join(\"_\")]))\n  };\n}\n\nfunction useWindowSize() {\n  _s2();\n\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s2(useWindowSize, \"CjfKsGs2OagLsgbbJDGKUlkMt48=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["C:/Users/Seif/Documents/GitHub/solar-metering/src/components/Graph.js"],"names":["React","useState","useEffect","prepDataForTable","Plot","Graph","props","tableData","data","windowSize","useWindowSize","traces","category","categories","x","y","getVsTime","push","name","type","mode","marker","color","includes","width","height","title","xaxis","yaxis","yTitle","responsive","yAxis","map","row","Date","Number","split","join","setWindowSize","undefined","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport prepDataForTable from '../helperFunctions/prepDataForTable';\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default function Graph(props) {\r\n    const { tableData } = prepDataForTable(props.data)\r\n    const windowSize = useWindowSize();\r\n    const traces = []\r\n    for (let category of props.categories) {\r\n        const { x, y } = getVsTime(category, tableData)\r\n        traces.push({\r\n            x,\r\n            y,\r\n            name: category,\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            marker: { color: category.includes(\"max\") ? 'red' : 'black' },\r\n        })\r\n    }\r\n    return (\r\n        <Plot\r\n            data={traces}\r\n            layout={{\r\n                width: windowSize.width - 20, height: 500, title: props.title, xaxis: { title: 'Time' }, yaxis: { title: props.yTitle }\r\n            }}\r\n            config={{ responsive: true }}\r\n        />\r\n    )\r\n\r\n}\r\n\r\nfunction getVsTime(yAxis, tableData) {\r\n    return { x: tableData.map(row => new Date(row[\"time (UTC)\"])), y: tableData.map(row => Number(row[yAxis.split(\" \").join(\"_\")])) }\r\n}\r\n\r\nfunction useWindowSize() {\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: undefined,\r\n        height: undefined,\r\n    });\r\n    useEffect(() => {\r\n        // Handler to call on window resize\r\n        function handleResize() {\r\n            setWindowSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n            });\r\n        }\r\n        // Add event listener\r\n        window.addEventListener(\"resize\", handleResize);\r\n        // Call handler right away so state gets updated with initial window size\r\n        handleResize();\r\n        // Remove event listener on cleanup\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return windowSize;\r\n}"]},"metadata":{},"sourceType":"module"}