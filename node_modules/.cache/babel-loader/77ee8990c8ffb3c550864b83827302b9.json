{"ast":null,"code":"export default function prepDataForTable(arr, fields) {\n  // const key = arr.shift()\n  // const tableData = arr.map(row=>{\n  //     let rowObj = {}\n  //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\n  //     return rowObj\n  // })\n  // return {key, tableData}\n  for (let timeKey of Object.keys(arr[0]).filter(el => el.includes(\"time\"))) {\n    arr.forEach(row => {\n      row[timeKey] = new Date(row[timeKey]).toUTCString();\n      row.sort();\n    });\n  }\n\n  return {\n    tableData: arr,\n    key: Object.keys(arr[0]).filter(name => !fields ? true : fields.includes(name)).map(name => ({\n      label: name.split(\"_\").join(\" \"),\n      field: name\n    }))\n  };\n}","map":{"version":3,"sources":["C:/Users/Seif/Documents/GitHub/solar-metering/src/helperFunctions/prepDataForTable.js"],"names":["prepDataForTable","arr","fields","timeKey","Object","keys","filter","el","includes","forEach","row","Date","toUTCString","sort","tableData","key","name","map","label","split","join","field"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,GAA1B,EAA+BC,MAA/B,EAAuC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAI,IAAIC,OAAR,IAAmBC,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAAC,CAAD,CAAf,EAAoBK,MAApB,CAA2BC,EAAE,IAAEA,EAAE,CAACC,QAAH,CAAY,MAAZ,CAA/B,CAAnB,EAAuE;AACnEP,IAAAA,GAAG,CAACQ,OAAJ,CAAYC,GAAG,IAAE;AACbA,MAAAA,GAAG,CAACP,OAAD,CAAH,GAAa,IAAIQ,IAAJ,CAASD,GAAG,CAACP,OAAD,CAAZ,EAAuBS,WAAvB,EAAb;AACAF,MAAAA,GAAG,CAACG,IAAJ;AACH,KAHD;AAIH;;AACD,SAAO;AAACC,IAAAA,SAAS,EAAEb,GAAZ;AAAiBc,IAAAA,GAAG,EAAEX,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAAC,CAAD,CAAf,EAAoBK,MAApB,CAA2BU,IAAI,IAAE,CAACd,MAAD,GAAQ,IAAR,GAAaA,MAAM,CAACM,QAAP,CAAgBQ,IAAhB,CAA9C,EAAqEC,GAArE,CAAyED,IAAI,KAAG;AAACE,MAAAA,KAAK,EAAEF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,GAArB,CAAR;AAAmCC,MAAAA,KAAK,EAACL;AAAzC,KAAH,CAA7E;AAAtB,GAAP;AACH","sourcesContent":["export default function prepDataForTable(arr, fields) {\r\n    // const key = arr.shift()\r\n    // const tableData = arr.map(row=>{\r\n    //     let rowObj = {}\r\n    //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\r\n    //     return rowObj\r\n    // })\r\n    // return {key, tableData}\r\n    for(let timeKey of Object.keys(arr[0]).filter(el=>el.includes(\"time\"))){\r\n        arr.forEach(row=>{\r\n            row[timeKey]=new Date(row[timeKey]).toUTCString();\r\n            row.sort();\r\n        })\r\n    }\r\n    return {tableData: arr, key: Object.keys(arr[0]).filter(name=>!fields?true:fields.includes(name)).map(name=>({label: name.split(\"_\").join(\" \"), field:name}))}\r\n}"]},"metadata":{},"sourceType":"module"}