{"ast":null,"code":"export default function prepDataForTable(arr, fields) {\n  // const key = arr.shift()\n  // const tableData = arr.map(row=>{\n  //     let rowObj = {}\n  //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\n  //     return rowObj\n  // })\n  // return {key, tableData}\n  for (let timeKey of Object.keys(arr[0]).filter(el => el.includes(\"time\"))) {\n    arr.forEach(row => {\n      row[timeKey] = new Date(row[timeKey]).toUTCString();\n    });\n  }\n\n  const key = Object.keys(arr[0]).filter(name => !fields ? true : fields.includes(name)).map(name => ({\n    label: name.split(\"_\").join(\" \").replace(\"Vb max daily\", \"Battery Voltage Max (Daily)\").replace(\"Vb min daily\", \"Battery Voltage Min (Daily)\").replace(\"Whc daily\", \"Battery Wh (Daily)\").replace(\"fault daily\", \"Fault Daily\").replace(\"alarm daily\", \"Alarm Daily\"),\n    field: name\n  }));\n  return {\n    tableData: arr,\n    key\n  };\n}","map":{"version":3,"sources":["C:/Users/Seif/Documents/GitHub/solar-metering/src/helperFunctions/prepDataForTable.js"],"names":["prepDataForTable","arr","fields","timeKey","Object","keys","filter","el","includes","forEach","row","Date","toUTCString","key","name","map","label","split","join","replace","field","tableData"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,GAA1B,EAA+BC,MAA/B,EAAuC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAI,IAAIC,OAAR,IAAmBC,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAAC,CAAD,CAAf,EAAoBK,MAApB,CAA2BC,EAAE,IAAEA,EAAE,CAACC,QAAH,CAAY,MAAZ,CAA/B,CAAnB,EAAuE;AACnEP,IAAAA,GAAG,CAACQ,OAAJ,CAAYC,GAAG,IAAE;AACbA,MAAAA,GAAG,CAACP,OAAD,CAAH,GAAe,IAAIQ,IAAJ,CAASD,GAAG,CAACP,OAAD,CAAZ,EAAuBS,WAAvB,EAAf;AACH,KAFD;AAGH;;AAED,QAAMC,GAAG,GAAGT,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAAC,CAAD,CAAf,EACXK,MADW,CACJQ,IAAI,IAAE,CAACZ,MAAD,GAAQ,IAAR,GAAaA,MAAM,CAACM,QAAP,CAAgBM,IAAhB,CADf,EAEXC,GAFW,CAEPD,IAAI,KAAG;AACRE,IAAAA,KAAK,EAAEF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,GAArB,EAA0BC,OAA1B,CAAkC,cAAlC,EAAkD,6BAAlD,EACNA,OADM,CACE,cADF,EACkB,6BADlB,EAENA,OAFM,CAEE,WAFF,EAEe,oBAFf,EAGNA,OAHM,CAGE,aAHF,EAGiB,aAHjB,EAINA,OAJM,CAIE,aAJF,EAIiB,aAJjB,CADC;AAORC,IAAAA,KAAK,EAAEN;AAPC,GAAH,CAFG,CAAZ;AAWA,SAAO;AACHO,IAAAA,SAAS,EAAEpB,GADR;AAEHY,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["export default function prepDataForTable(arr, fields) {\r\n    // const key = arr.shift()\r\n    // const tableData = arr.map(row=>{\r\n    //     let rowObj = {}\r\n    //     row.forEach((rowEl, index)=>rowObj[key[index]] = rowEl)\r\n    //     return rowObj\r\n    // })\r\n    // return {key, tableData}\r\n    for(let timeKey of Object.keys(arr[0]).filter(el=>el.includes(\"time\"))){\r\n        arr.forEach(row=>{\r\n            row[timeKey] = new Date(row[timeKey]).toUTCString();\r\n        })\r\n    }\r\n\r\n    const key = Object.keys(arr[0])\r\n    .filter(name=>!fields?true:fields.includes(name))\r\n    .map(name=>({\r\n        label: name.split(\"_\").join(\" \").replace(\"Vb max daily\", \"Battery Voltage Max (Daily)\")\r\n        .replace(\"Vb min daily\", \"Battery Voltage Min (Daily)\")\r\n        .replace(\"Whc daily\", \"Battery Wh (Daily)\")\r\n        .replace(\"fault daily\", \"Fault Daily\")\r\n        .replace(\"alarm daily\", \"Alarm Daily\"),\r\n\r\n        field: name\r\n    }))\r\n    return {\r\n        tableData: arr,\r\n        key\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}